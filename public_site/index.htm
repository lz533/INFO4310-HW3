<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://d3js.org/topojson.v3.min.js"></script>
  <link
    href="https://fonts.googleapis.com/css?family=Aldrich|Arima+Madurai|Open Sans|Libre+Baskerville|Pirata+One|Poiret+One|Sancreek|Satisfy|Share+Tech+Mono|Smokum|Snowburst+One|Special+Elite"
    rel="stylesheet" />

  <style>
    body {
      font: "Arima+Madurai";
      /* background-image: url("./assets/food.jpeg"); */
    }
    .filter-title {
      font-size: 16pt;
      text-anchor: middle;
      font-weight: bold;
    }
  </style>
</head>

<body>
  <h2 style="text-align: center; font-weight: bold;">
    Pittsburgh Homefinder for Foodies
  </h2>
  <h4 style="text-align: center; font-weight: bold;">
    Eric Freitag, Longyi Zhang, Lyon Li, Miles Rosenthal
  </h4>
  <div style="text-align: center">
    <p style="margin-bottom: 50; text-align: left"></p>

    <svg id="main" height="750" width="900" style="margin-bottom: 50; border: 1px solid black; background: #eee"></svg>
    <svg id="filters" height="750" width="300" style="margin-bottom: 50; border: 1px solid black; background: #eee"></svg>
  </div>
</body>

<script>
  let render = async function () {
    // Set up main visualization
    const main = d3.select("#main");
    const mainMargin = { t: 10, r: 10, b: 10, l: 10 };
    const mainWidth = main.attr("width") - mainMargin.l - mainMargin.r;
    const mainHeight = main.attr("height") - mainMargin.t - mainMargin.b;
    const viewport = main
      .append("g")
      .attr("transform", `translate(${mainMargin.l},${mainMargin.t})`);


    // Load and process datasets
    const zillow = await d3.csv("./zillow_pittsburgh.csv");
    const yelp = await d3.csv("./yelp_pittsburgh_restaurants.csv");


    const pittsburgh = await d3.json("./pittsburgh.json");

    // Create pittsburgh map
    let projection = d3
      .geoMercator()
      .fitSize([mainWidth, mainHeight], pittsburgh);
    let pathGenerator = d3.geoPath(projection);
    zillow.forEach((d) => {
      d.Position = projection([d.Longitude, d.Latitude]);
    })
    yelp.forEach((d) => {
      d.Position = projection([d.longitude, d.latitude]);
    })

    viewport
      .selectAll("path")
      .data(pittsburgh.features)
      .join("path")
      .attr("d", pathGenerator)
      .attr("fill", "#eee")
      .attr("stroke", "#000")
      .attr("stroke-width", 1);

    // Additional variables
    let zillowPriceExtent = d3.extent(zillow, d => Number(d['Sale Amount']))
    let logScale = d3.scaleLog().domain(zillowPriceExtent)
    // let zillowScale = d3.scaleSequential(zillowPriceExtent, d3.interpolateViridis)
    let zillowScale = d3.scaleSequential(d => d3.interpolateViridis(logScale(d)))


    let yelpScale = d3.scaleSequential([1, 5], d3.interpolateRdYlGn)

    // Plot zillow and yelp data
    let circlesZillow = viewport
      .selectAll("circle.zillow")
      .data(zillow)
      .join("circle")
      .attr("class", "zillow")
      .attr("cx", (d) => d.Position[0])
      .attr("cy", (d) => d.Position[1])
      .attr("r", 4)
      .attr("fill", d => zillowScale(d['Sale Amount']))
      .attr("stroke-width", 1);

    let squaresYelp = viewport
      .selectAll("rect.yelp")
      .data(yelp)
      .join("rect")
      .attr("class", "yelp")
      .attr("x", (d) => d.Position[0] - 3)
      .attr("y", (d) => d.Position[1] - 3)
      .attr("width", 6)
      .attr("height", 6)
      .attr("fill", d => yelpScale(d.rating))
      .attr("visibility", "hidden");

    // Zillow mouseover and click functions
    var onCircle = false;
    var clickedCircle = false;
    circlesZillow.on("mouseover", function (event, d) {
      d3.select(this).attr("stroke", "black").attr('stroke-width', 2);
      onCircle = true;
    });

    circlesZillow.on("mouseout", function (event, d) {
      d3.select(this).attr("stroke", "");
      onCircle = false;
    });

    circlesZillow.on("click", function (event, d) {
      if (!clickedCircle) selectHome(this);
      clickedCircle = true;
    });

    main.on("click", function (event, d) {
      if (clickedCircle && !onCircle) {
        leaveHome(this);
        clickedCircle = false;
      }
    });

    // Zoom in and display nearby yelp data when a home is clicked
    const zoom = d3.zoom().scaleExtent([1, 8]).on("zoom", zoomed);
    viewport.call(zoom);

    function zoomed(event) {
      const { transform } = event;
      viewport.attr("transform", transform);
      viewport.attr("stroke-width", 1 / transform.k);
    }

    function selectHome(d) {
      xval = d.cx.baseVal.value;
      yval = d.cy.baseVal.value;

      circlesZillow.attr("visibility", "hidden")
      viewport.append('image')
        .attr('id', 'pointer')
        .attr('x', xval - 8)
        .attr('y', yval - 16)
        .attr('width', 16)
        .attr('height', 16)
        .attr('href', './assets/mapCursor.svg')
      d3.select(d).attr("visibility", "visible")
      viewport
        .transition()
        .duration(500)
        .call(
          zoom.transform,
          d3.zoomIdentity
            // .scale(2)
            // .translate(-xval + mainWidth / 4, -yval + mainHeight / 4)
            .scale(4)
            .translate(-xval + mainWidth / 8, -yval + mainHeight / 8)
        )

      setTimeout(() => { squaresYelp.attr("visibility", "visible") }, 600)

    }

    // Clear map and zoom out when clicking elsewhere
    function leaveHome() {

      squaresYelp.attr("visibility", "hidden");
      viewport.select('#pointer').remove()
      circlesZillow.attr("visibility", "visible")
      viewport
        .transition()
        .duration(500)
        .call(
          zoom.transform,
          d3.zoomIdentity
        )
    }

    // Set up filter box
    const filters = d3.select("#filters");
    const filterWidth = filters.attr("width");
    const filterHeight = filters.attr("height");

    filters.append("text")
          .attr("class", "filter-title")
          .text("Filter Housing Listings")
          .attr("transform", `translate(${filterWidth / 2},${50})`);
    filters.append("foreignObject")
        .attr("transform", `translate(${filterWidth/4},${100})`)
        .attr("width", filterWidth/2)
        .attr("height", 100)
        .append("xhtml:input")
        .type("number")
  };
  render();
</script>

</html>